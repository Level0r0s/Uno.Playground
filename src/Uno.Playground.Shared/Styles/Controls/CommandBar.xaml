<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:win="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:xamarin="http://uno.ui/xamarin"
					xmlns:ios="http://uno.ui/ios"
					xmlns:wasm="http://uno.ui/ios"
					xmlns:android="http://uno.ui/android"
					mc:Ignorable="xamarin android ios wasm">

	<x:Double x:Key="CommandBarElevation">4</x:Double>

	<Style x:Key="TransparentCommandBarStyle"
		   BasedOn="{StaticResource DefaultCommandBarStyle}"
		   TargetType="CommandBar">
		<win:Setter Property="BorderThickness"
					Value="0" />
		<ios:Setter Property="Background"
					Value="Transparent" />
		<android:Setter Property="(toolkit:UIElementExtensions.Elevation)"
						Value="0" />
	</Style>

	<wasm:Style x:Key="NativeDefaultCommandBar" TargetType="CommandBar" />

	<Style x:Key="DefaultCommandBarStyle"
		   TargetType="CommandBar"
		   xamarin:BasedOn="{StaticResource NativeDefaultCommandBar}">
		<Setter Property="VerticalContentAlignment"
				Value="Center" />
		<Setter Property="Background"
				Value="{StaticResource Color01Brush}" />
		<Setter Property="Foreground"
				Value="{StaticResource Color02Brush}" />
		<Setter Property="FontFamily"
				Value="{StaticResource FontFamily01Semibold}" />
		<Setter Property="FontWeight"
				Value="SemiBold" />
		<Setter Property="FontSize"
				Value="17" />
		<xamarin:Setter Property="(toolkit:VisibleBoundsPadding.PaddingMask)"
						Value="Top" />
		<ios:Setter Property="(toolkit:CommandBarExtensions.BackButtonForeground)"
					Value="{StaticResource Color02Brush}" />
		<android:Setter Property="(toolkit:UIElementExtensions.Elevation)"
						Value="{StaticResource CommandBarElevation}" />

		<!--iOS-->
		<ios:Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CommandBar">
					<Border BorderBrush="{TemplateBinding Background}"
							BorderThickness="{TemplateBinding Padding}"
							Background="{TemplateBinding Background}">
						<NativeCommandBarPresenter Height="44" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</ios:Setter>

		<!--Windows-->
		<win:Setter Property="BorderBrush"
					Value="{StaticResource Color17Brush}" />
		<win:Setter Property="BorderThickness"
					Value="0,0,0,1" />
		<win:Setter Property="HorizontalContentAlignment"
					Value="Left" />
		<!--Simplified CommandBar template that adds support for Uno.UI.CommandBarExtensions.NavigationCommand on Windows.-->
		<win:Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CommandBar">
					<Grid x:Name="LayoutRoot"
						  Height="48"
						  BorderThickness="{TemplateBinding BorderThickness}"
						  BorderBrush="{TemplateBinding BorderBrush}"
						  Background="{TemplateBinding Background}">
						<Grid x:Name="ContentRoot"
							  VerticalAlignment="Top"
							  Margin="{TemplateBinding Padding}"
							  Height="{TemplateBinding Height}"
							  Background="{TemplateBinding Background}"
							  Opacity="{TemplateBinding Opacity}">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<ContentControl x:Name="NavigationCommand"
											Grid.Column="0"
											IsTabStop="False"
											Foreground="{TemplateBinding Foreground}" />
							<!--Content="{Binding (toolkit:CommandBarExtensions.NavigationCommand), RelativeSource={RelativeSource TemplatedParent}}"-->
							<!--Use a ContentControl rather than a ContentPresenter so that IsEnabled can be set to false
								 in the Minimal/HiddenClosed states to remove it from being a tab-stop candidate.-->
							<ContentControl x:Name="ContentControl"
											Grid.Column="1"
											Height="48"
											HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
											VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
											HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											Content="{TemplateBinding Content}"
											ContentTemplate="{TemplateBinding ContentTemplate}"
											Foreground="{TemplateBinding Foreground}"
											IsTabStop="False" />
							<ItemsControl x:Name="PrimaryItemsControl"
										  HorizontalAlignment="Right"
										  MinHeight="{ThemeResource AppBarThemeMinHeight}"
										  IsTabStop="False"
										  Grid.Column="2">
								<ItemsControl.ItemsPanel>
									<ItemsPanelTemplate>
										<StackPanel Orientation="Horizontal" />
									</ItemsPanelTemplate>
								</ItemsControl.ItemsPanel>
							</ItemsControl>
						</Grid>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</win:Setter>
		<win:Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<TextBlock Text="{Binding}"
							   HorizontalAlignment="Center"
							   VerticalAlignment="Center"
							   FontSize="17"
							   FontWeight="SemiBold"
							   FontFamily="{StaticResource FontFamily01Semibold}"
							   Margin="16,0" />
				</DataTemplate>
			</Setter.Value>
		</win:Setter>
	</Style>

	<ios:Style x:Key="NativeDefaultCommandBar"
			   TargetType="CommandBar">
		<Setter Property="Background"
				Value="{x:Null}" />
		<Setter Property="Foreground"
				Value="{x:Null}" />
		<Setter Property="HorizontalAlignment"
				Value="Stretch" />
		<Setter Property="VerticalAlignment"
				Value="Top" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CommandBar">
					<!--We use BorderBrush instead of Background to ensure that semi-transparent background of Grid and NativeCommandBarPresenter don't add up-->
					<Border BorderBrush="{TemplateBinding Background}"
							BorderThickness="{TemplateBinding Padding}">
						<!--TODO: 1px line-->
						<NativeCommandBarPresenter Height="44" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</ios:Style>

	<android:Style x:Key="NativeDefaultCommandBar"
				   TargetType="CommandBar">
		<Setter Property="Background"
				Value="{x:Null}" />
		<Setter Property="Foreground"
				Value="{x:Null}" />
		<Setter Property="HorizontalAlignment"
				Value="Stretch" />
		<Setter Property="VerticalAlignment"
				Value="Top" />
		<!--Android-specific property-->
		<android:Setter Property="(toolkit:UIElementExtensions.Elevation)"
						Value="4" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="CommandBar">
					<NativeCommandBarPresenter />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</android:Style>

	<!--Default CommandBar Style-->
	<Style TargetType="CommandBar"
		   BasedOn="{StaticResource DefaultCommandBarStyle}" />

</ResourceDictionary>
